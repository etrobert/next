{"version":3,"sources":["firestore.ts","hooks/useAddProject.ts","components/LandingPage/LandingPage.tsx","atoms.ts","hooks/useRecoilProjectState.ts","hooks/useSyncFirestore.ts","hooks/useClearProjectOnNewId.ts","hooks/useAddTask.ts","components/IconButton/IconButton.tsx","hooks/useDeleteTask.ts","hooks/useUpdateTask.ts","components/ListView/Task.tsx","components/ListView/ListView.tsx","components/NextPanel/NextPanel.tsx","hooks/useAddDependency.ts","hooks/useCytoscapeEvent.ts","components/Graph/Graph.tsx","components/MainPage/MainPage.tsx","components/App/App.tsx","reportWebVitals.ts","cytoscapeSetup.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","getFirestore","useAddProjet","useCallback","addDoc","collection","LandingPage","addProject","useAddProject","useState","creatingProject","setCreatingProject","onCtaClick","a","ref","window","location","href","id","className","onClick","undefined","taskStateById","atomFamily","key","default","name","status","dependencyStateById","predecessor","successor","projectIdState","atom","projectState","tasks","dependencies","projectWithoutCompletedState","selector","get","partition","task","completed","filter","dep","some","hasTaskPredecessorStateById","selectorFamily","taskId","depId","nextTaskIdState","cytoscapeDataState","tasksData","map","data","dependenciesData","source","target","useRecoilProjectState","addTask","useRecoilCallback","set","project","removeTask","without","setTask","addDependency","dependency","removeDependency","useSyncFirestore","useRecoilValue","useEffect","onSnapshot","snapshot","docChanges","forEach","change","doc","type","useClearProjectOnNewId","setProject","useSetRecoilState","useAddTask","IconButton","icon","title","props","iconSvg","feather","icons","toSvg","dangerouslySetInnerHTML","__html","useDeleteTask","batch","writeBatch","depsRef","predsQuery","query","where","succsQuery","Promise","all","getDocs","preds","succs","deleteFromSnapshot","delete","commit","useUpdateTask","update","updateDoc","Task","deleteTask","updateTask","checked","onChange","ListView","newTaskName","setNewTaskName","onSubmit","e","preventDefault","form","value","NextPanel","nextTaskId","useRecoilState","nextTask","setNextTask","useCytoscapeEvent","cy","events","handler","on","removeListener","cytoscapeStylesheet","style","width","height","shape","label","padding","Graph","setCy","layout","animate","run","stop","eh","edgehandles","snap","hoverDelay","enableDrawMode","destroy","useAddDependency","event","sourceNode","targetNode","addedEdge","elements","stylesheet","MainPage","useParams","setProjectId","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cytoscape","use","cola","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c3b2e98.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAvvj4nuUOxBJ6d0iE1Gjgg8gCXO7aXo_g',\n  authDomain: 'next-etienne.firebaseapp.com',\n  projectId: 'next-etienne',\n  storageBucket: 'next-etienne.appspot.com',\n  messagingSenderId: '489100545863',\n  appId: '1:489100545863:web:dafb3e6b2bb270198e4662',\n};\n\nconst app = initializeApp(firebaseConfig);\n\nconst firestore = getFirestore(app);\n\nexport default firestore;\n","import { useCallback } from 'react';\nimport { addDoc, collection } from 'firebase/firestore';\n\nimport firestore from 'firestore';\n\nconst useAddProjet = () =>\n  useCallback(() => addDoc(collection(firestore, 'projects'), {}), []);\n\nexport default useAddProjet;\n","import { useState } from 'react';\n\nimport useAddProject from 'hooks/useAddProject';\n\nimport './LandingPage.css';\n\nconst LandingPage = () => {\n  const addProject = useAddProject();\n\n  const [creatingProject, setCreatingProject] = useState(false);\n\n  const onCtaClick = async () => {\n    setCreatingProject(true);\n    const ref = await addProject();\n    window.location.href = `/next/project/${ref.id}`;\n  };\n\n  return (\n    <div className=\"LandingPage\">\n      <h1 className=\"LandingPage__title\">Next</h1>\n      <button\n        className={'LandingPage__cta'}\n        onClick={creatingProject ? undefined : onCtaClick}\n      >\n        {creatingProject ? 'Creating Project...' : 'START NOW'}\n      </button>\n    </div>\n  );\n};\nexport default LandingPage;\n","import { atom, atomFamily, selector, selectorFamily } from 'recoil';\nimport partition from 'lodash/partition';\n\nimport type {\n  DependencyId,\n  Dependency,\n  Project,\n  ProjectId,\n  Task,\n  TaskId,\n} from './types';\n\nimport type Cy from 'cytoscape';\n\nconst taskStateById = atomFamily<Task, TaskId>({\n  key: 'Task',\n  default: {\n    name: 'DEFAULT-NAME',\n    status: 'ready',\n  },\n});\n\nconst dependencyStateById = atomFamily<Dependency, DependencyId>({\n  key: 'Dependency',\n  default: {\n    predecessor: 'DEFAULT-ID',\n    successor: 'DEFAULT-ID',\n  },\n});\n\nconst projectIdState = atom<ProjectId>({\n  key: 'ProjectId',\n  default: 'AY61ltFwdgzx8AgBFqKC',\n});\n\nconst projectState = atom<Project>({\n  key: 'Project',\n  default: { tasks: [], dependencies: [] },\n});\n\nconst projectWithoutCompletedState = selector<Project>({\n  key: 'ProjectWithoutCompleted',\n  get: ({ get }) => {\n    const { tasks, dependencies } = get(projectState);\n    const [completed, nonCompleted] = partition(\n      tasks,\n      (task) => get(taskStateById(task)).status === 'completed'\n    );\n\n    const deps = dependencies.filter((dep) => {\n      const { predecessor, successor } = get(dependencyStateById(dep));\n      // We filter out deps that have successor or predecessor completed\n      return !completed.some(\n        (task) => task === successor || task === predecessor\n      );\n    });\n\n    return { tasks: nonCompleted, dependencies: deps };\n  },\n});\n\nconst hasTaskPredecessorStateById = selectorFamily<boolean, TaskId>({\n  key: 'HasTaskPredecessor',\n  get:\n    (taskId) =>\n    ({ get }) => {\n      const { dependencies } = get(projectState);\n      return dependencies.some((depId) => {\n        const { successor } = get(dependencyStateById(depId));\n        return successor === taskId;\n      });\n    },\n});\n\nconst nextTaskIdState = selector<TaskId | null>({\n  key: 'NextTaskId',\n  get: ({ get }) => {\n    const { tasks } = get(projectState);\n    return (\n      tasks.filter((taskId) => {\n        return (\n          !get(hasTaskPredecessorStateById(taskId)) &&\n          get(taskStateById(taskId)).status === 'ready'\n        );\n      })[0] ?? null\n    );\n  },\n});\n\nconst cytoscapeDataState = selector<Cy.ElementDefinition[]>({\n  key: 'CytoscapeData',\n  get: ({ get }) => {\n    const { tasks, dependencies } = get(projectWithoutCompletedState);\n    const tasksData = tasks.map((id) => {\n      const { name } = get(taskStateById(id));\n      return { data: { id, name } };\n    });\n\n    const dependenciesData = dependencies.map((id) => {\n      const { predecessor: source, successor: target } = get(\n        dependencyStateById(id)\n      );\n      return { data: { id, source, target } };\n    });\n\n    return [...tasksData, ...dependenciesData];\n  },\n});\n\nexport {\n  taskStateById,\n  dependencyStateById,\n  projectIdState,\n  projectState,\n  nextTaskIdState,\n  cytoscapeDataState,\n};\n","import { without } from 'lodash';\nimport { useRecoilCallback } from 'recoil';\n\nimport { dependencyStateById, projectState, taskStateById } from 'atoms';\nimport { Dependency, DependencyId, Task, TaskId } from 'types';\n\nconst useRecoilProjectState = () => {\n  const addTask = useRecoilCallback(({ set }) => (id: TaskId, task: Task) => {\n    set(taskStateById(id), task);\n    set(projectState, (project) => ({\n      ...project,\n      tasks: [...project.tasks, id],\n    }));\n  });\n\n  const removeTask = useRecoilCallback(\n    ({ set }) =>\n      (id: TaskId) =>\n        set(projectState, (project) => ({\n          ...project,\n          tasks: without(project.tasks, id),\n        }))\n  );\n\n  const setTask = useRecoilCallback(\n    ({ set }) =>\n      (id: TaskId, task: Task) =>\n        set(taskStateById(id), task)\n  );\n\n  const addDependency = useRecoilCallback(\n    ({ set }) =>\n      (id: DependencyId, dependency: Dependency) => {\n        set(dependencyStateById(id), dependency);\n        set(projectState, (project) => ({\n          ...project,\n          dependencies: [...project.dependencies, id],\n        }));\n      }\n  );\n\n  const removeDependency = useRecoilCallback(\n    ({ set }) =>\n      (id: DependencyId) =>\n        set(projectState, (project) => ({\n          ...project,\n          dependencies: without(project.dependencies, id),\n        }))\n  );\n\n  return { addTask, setTask, removeTask, addDependency, removeDependency };\n};\n\nexport default useRecoilProjectState;\n","import { useEffect } from 'react';\nimport { collection, onSnapshot } from 'firebase/firestore';\nimport { useRecoilValue } from 'recoil';\n\nimport useRecoilProjectState from './useRecoilProjectState';\nimport { projectIdState } from 'atoms';\nimport firestore from 'firestore';\nimport { Dependency, Task } from 'types';\n\nconst useSyncFirestore = (): void => {\n  const projectId = useRecoilValue(projectIdState);\n  const { addTask, setTask, removeTask, addDependency, removeDependency } =\n    useRecoilProjectState();\n\n  useEffect(() => {\n    const ref = collection(firestore, `projects/${projectId}/tasks`);\n    const unsubscribe = onSnapshot(ref, (snapshot) =>\n      snapshot.docChanges().forEach((change) => {\n        const { id } = change.doc;\n        const task = change.doc.data() as Task;\n        switch (change.type) {\n          case 'added':\n            addTask(id, task);\n            break;\n          case 'modified':\n            setTask(id, task);\n            break;\n          case 'removed':\n            removeTask(id);\n            break;\n        }\n      })\n    );\n    return unsubscribe;\n  }, [projectId, addTask, removeTask, setTask]);\n\n  useEffect(() => {\n    const ref = collection(firestore, `projects/${projectId}/dependencies`);\n    const unsubscribe = onSnapshot(ref, (snapshot) =>\n      snapshot.docChanges().forEach((change) => {\n        const { id } = change.doc;\n        const dependency = change.doc.data() as Dependency;\n        switch (change.type) {\n          case 'added':\n            addDependency(id, dependency);\n            break;\n          case 'modified':\n            // setTask(id, task);\n            break;\n          case 'removed':\n            removeDependency(id);\n            break;\n        }\n      })\n    );\n    return unsubscribe;\n  }, [projectId, addDependency, removeDependency]);\n};\n\nexport default useSyncFirestore;\n","import { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { projectState } from 'atoms';\n\nconst useClearProjectOnNewId = () => {\n  const setProject = useSetRecoilState(projectState);\n  useEffect(() => setProject({ tasks: [], dependencies: [] }));\n};\n\nexport default useClearProjectOnNewId;\n","import { addDoc, collection } from 'firebase/firestore';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport firestore from 'firestore';\n\nimport { projectIdState } from 'atoms';\n\nconst useAddTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (name: string) => {\n      const ref = collection(firestore, `projects/${projectId}/tasks`);\n      const task = {\n        name,\n        status: 'ready',\n      };\n      return addDoc(ref, task);\n    },\n    [projectId]\n  );\n};\n\nexport default useAddTask;\n","import { ButtonHTMLAttributes } from 'react';\nimport feather from 'feather-icons';\n\nimport './IconButton.css';\n\ntype Props = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'children'> & {\n  title: string;\n  icon: string;\n};\n\nconst IconButton = ({ icon, className, title, ...props }: Props) => {\n  const iconSvg = feather.icons[icon].toSvg();\n  return (\n    <button\n      className={`IconButton ${className}`}\n      {...props}\n      dangerouslySetInnerHTML={{ __html: iconSvg }}\n      aria-label={title}\n      title={title}\n    />\n  );\n};\n\nexport default IconButton;\n","import { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport {\n  collection,\n  doc,\n  DocumentData,\n  getDocs,\n  query,\n  QueryDocumentSnapshot,\n  where,\n  writeBatch,\n} from 'firebase/firestore';\n\nimport { projectIdState } from 'atoms';\nimport { TaskId } from 'types';\nimport firestore from 'firestore';\n\nconst useDeleteTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    async (id: TaskId) => {\n      const batch = writeBatch(firestore);\n      const depsRef = collection(\n        firestore,\n        `projects/${projectId}/dependencies`\n      );\n      const predsQuery = query(depsRef, where('successor', '==', id));\n      const succsQuery = query(depsRef, where('predecessor', '==', id));\n\n      const [preds, succs] = await Promise.all([\n        getDocs(predsQuery),\n        getDocs(succsQuery),\n      ]);\n\n      const deleteFromSnapshot = (\n        snapshot: QueryDocumentSnapshot<DocumentData>\n      ) => {\n        const ref = doc(\n          firestore,\n          `projects/${projectId}/dependencies/${snapshot.id}`\n        );\n        batch.delete(ref);\n      };\n\n      preds.forEach(deleteFromSnapshot);\n      succs.forEach(deleteFromSnapshot);\n\n      batch.delete(doc(firestore, `projects/${projectId}/tasks/${id}`));\n      return batch.commit();\n    },\n    [projectId]\n  );\n};\n\nexport default useDeleteTask;\n","import { doc, updateDoc } from 'firebase/firestore';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport firestore from 'firestore';\n\nimport { projectIdState } from 'atoms';\nimport { Task, TaskId } from 'types';\n\nconst useUpdateTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (id: TaskId, update: Partial<Task>) =>\n      updateDoc(doc(firestore, `projects/${projectId}/tasks/${id}`), update),\n    [projectId]\n  );\n};\n\nexport default useUpdateTask;\n","import { useRecoilValue } from 'recoil';\n\nimport { taskStateById } from 'atoms';\nimport { TaskId } from 'types';\nimport useDeleteTask from 'hooks/useDeleteTask';\nimport useUpdateTask from 'hooks/useUpdateTask';\nimport IconButton from 'components/IconButton/IconButton';\n\nimport './Task.css';\n\ntype Props = {\n  id: TaskId;\n};\n\nconst Task = ({ id }: Props) => {\n  const { name, status } = useRecoilValue(taskStateById(id));\n\n  const deleteTask = useDeleteTask();\n  const updateTask = useUpdateTask();\n\n  // TODO Use updater rather than local value\n  const toggleStatus = () =>\n    updateTask(id, { status: status === 'ready' ? 'completed' : 'ready' });\n\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"checkbox\"\n          checked={status === 'completed'}\n          onChange={toggleStatus}\n        />\n      </td>\n      <td className={'Task__name-td'}>{name}</td>\n      <td>\n        <IconButton\n          icon={'x-square'}\n          title={'Delete'}\n          onClick={() => deleteTask(id)}\n        />\n      </td>\n    </tr>\n  );\n};\n\nexport default Task;\n","import { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { projectState } from 'atoms';\nimport useAddTask from 'hooks/useAddTask';\nimport IconButton from 'components/IconButton/IconButton';\n\nimport Task from './Task';\n\nimport './ListView.css';\n\nconst ListView = () => {\n  const { tasks } = useRecoilValue(projectState);\n  const [newTaskName, setNewTaskName] = useState<string>('');\n\n  const addTask = useAddTask();\n\n  return (\n    <>\n      <form\n        id=\"new-task-form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (newTaskName === '') return;\n          addTask(newTaskName);\n          setNewTaskName('');\n        }}\n      />\n      <table className=\"ListView\">\n        <tbody>\n          {tasks.map((task) => (\n            <Task key={task} id={task} />\n          ))}\n          <tr>\n            <td>\n              <IconButton\n                icon=\"plus-square\"\n                type=\"submit\"\n                form=\"new-task-form\"\n                title=\"Create\"\n              />\n            </td>\n            <td>\n              <input\n                className=\"ListView__new-task-input\"\n                type=\"text\"\n                form=\"new-task-form\"\n                value={newTaskName}\n                onChange={(e) => setNewTaskName(e.target.value)}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default ListView;\n","import { useRecoilState, useRecoilValue } from 'recoil';\n\nimport { nextTaskIdState, taskStateById } from 'atoms';\n\nimport './NextPanel.css';\n\nconst NextPanel = () => {\n  const nextTaskId = useRecoilValue(nextTaskIdState);\n  const [nextTask, setNextTask] = useRecoilState(\n    taskStateById(nextTaskId ?? '')\n  );\n\n  return (\n    <div className=\"NextPanel\">\n      {nextTaskId === null ? (\n        <h2 className=\"NextPanel__done\">You're done!</h2>\n      ) : (\n        <>\n          <h2>Next Task</h2>\n          {nextTask.name}\n          <button\n            onClick={() =>\n              setNextTask((task) => ({ ...task, status: 'completed' }))\n            }\n          >\n            DONE!\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\nexport default NextPanel;\n","import { addDoc, collection } from 'firebase/firestore';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport firestore from 'firestore';\nimport { projectIdState } from 'atoms';\n\nimport type { TaskId } from 'types';\n\nconst useAddTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (predecessor: TaskId, successor: TaskId) => {\n      const ref = collection(firestore, `projects/${projectId}/dependencies`);\n      const dependency = {\n        predecessor,\n        successor,\n      };\n      return addDoc(ref, dependency);\n    },\n    [projectId]\n  );\n};\n\nexport default useAddTask;\n","import type Cy from 'cytoscape';\nimport { useEffect } from 'react';\n\nconst useCytoscapeEvent = (\n  cy: Cy.Core | null,\n  events: string,\n  handler: Cy.EventHandler\n) => {\n  useEffect(() => {\n    if (cy === null) return;\n\n    cy.on(events, handler);\n\n    return () => {\n      cy.removeListener(events, handler);\n    };\n  }, [cy, events, handler]);\n};\n\nexport default useCytoscapeEvent;\n","import { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nimport { cytoscapeDataState } from 'atoms';\nimport useAddDependency from 'hooks/useAddDependency';\nimport useCytoscapeEvent from 'hooks/useCytoscapeEvent';\n\nimport './Graph.css';\n\nimport type Cy from 'cytoscape';\n\nconst cytoscapeStylesheet = [\n  {\n    // [name] restricts the styling to elements with a name property\n    // This is useful because edgehandles creates ghost nodes\n    selector: 'node[name]',\n    style: {\n      // TODO Replace: label is deprecated\n      // Source https://github.com/cytoscape/cytoscape.js/issues/2713#issuecomment-712247855\n      width: 'label',\n      height: 'label',\n      shape: 'round-rectangle',\n      label: 'data(name)',\n      'text-valign': 'center' as const,\n      padding: '10px',\n    },\n  },\n  {\n    selector: 'edge',\n    style: {\n      'target-arrow-shape': 'triangle',\n      'curve-style': 'bezier',\n      width: '5',\n      'target-distance-from-node': 5,\n      'source-distance-from-node': 5,\n    },\n  },\n];\n\n/**\n * Interactive canvas displaying a Task Graph\n */\nconst Graph = (): JSX.Element => {\n  const [cy, setCy] = useState<Cy.Core | null>(null);\n\n  const data = useRecoilValue(cytoscapeDataState);\n\n  // Apply layout on data change\n  useEffect(() => {\n    if (cy === null) return;\n    const options = {\n      name: 'cola',\n      animate: true,\n    };\n    const layout = cy.layout(options);\n    layout.run();\n    return () => {\n      layout.stop();\n    };\n  }, [cy, data]);\n\n  // Configure cytoscape edgehandles\n  useEffect(() => {\n    if (cy === null) return;\n\n    const eh = cy.edgehandles({ snap: false, hoverDelay: 0 });\n    eh.enableDrawMode();\n\n    return () => eh.destroy();\n  }, [cy]);\n\n  const addDependency = useAddDependency();\n\n  const handler = (\n    event: Cy.EventObject,\n    sourceNode: Cy.NodeSingular,\n    targetNode: Cy.NodeSingular,\n    addedEdge: Cy.EdgeSingular\n  ) => addDependency(sourceNode.id(), targetNode.id());\n\n  //@ts-expect-error Typing is wrong\n  useCytoscapeEvent(cy, 'ehcomplete', handler);\n\n  return (\n    <div className=\"Graph\">\n      <CytoscapeComponent\n        className=\"Graph__cytoscape\"\n        elements={data}\n        stylesheet={cytoscapeStylesheet}\n        cy={(cy) => setCy(cy)}\n      />\n    </div>\n  );\n};\n\nexport default Graph;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useSetRecoilState } from 'recoil';\n\nimport { projectIdState } from 'atoms';\nimport useSyncFirestore from 'hooks/useSyncFirestore';\nimport useClearProjectOnNewId from 'hooks/useClearProjectOnNewId';\nimport ListView from 'components/ListView/ListView';\nimport NextPanel from 'components/NextPanel/NextPanel';\nimport Graph from 'components/Graph/Graph';\n\nimport './MainPage.css';\n\nconst MainPage = () => {\n  const { projectId } = useParams<{ projectId: string }>();\n\n  const setProjectId = useSetRecoilState(projectIdState);\n\n  useEffect(() => setProjectId(projectId), [projectId, setProjectId]);\n\n  useSyncFirestore();\n  useClearProjectOnNewId();\n\n  return (\n    <div className=\"MainPage\">\n      <div className=\"MainPage__left-pane\">\n        <h1 className=\"MainPage__title\">Next</h1>\n        <ListView />\n      </div>\n      <Graph />\n      <NextPanel />\n    </div>\n  );\n};\nexport default MainPage;\n","import { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport LandingPage from 'components/LandingPage/LandingPage';\nimport MainPage from 'components/MainPage/MainPage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/next\">\n      <Switch>\n        <Route exact path=\"/\">\n          <LandingPage />\n        </Route>\n        <Route path=\"/project/:projectId\">\n          <MainPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\n// @ts-expect-error Module is not typed\nimport cola from 'cytoscape-cola';\n\n// @ts-expect-error Typing does not work\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\n\nimport App from 'components/App/App';\n\nimport reportWebVitals from './reportWebVitals';\nimport './cytoscapeSetup';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}