{"version":3,"sources":["LandingPage/LandingPage.tsx","atoms.ts","useRecoilProjectState.ts","firestore.ts","useSyncFirestore.ts","useClearProjectOnNewId.ts","useAddTask.ts","useDeleteTask.ts","useUpdateTask.ts","ListView/Task.tsx","ListView/ListView.tsx","NextPanel/NextPanel.tsx","MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LandingPage","useState","uuidv4","newProjectId","className","to","taskStateById","atomFamily","key","default","name","status","projectIdState","atom","projectState","tasks","nextTaskIdState","selector","get","filter","taskId","useRecoilProjectState","addTask","useRecoilCallback","set","id","task","project","removeTask","without","setTask","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","getFirestore","useSyncFirestore","useRecoilValue","useEffect","ref","collection","onSnapshot","snapshot","docChanges","forEach","change","doc","data","type","useClearProjectOnNewId","setProject","useSetRecoilState","useAddTask","useCallback","addDoc","useDeleteTask","deleteDoc","useUpdateTask","update","updateDoc","Task","deleteTask","updateTask","checked","onChange","onClick","ListView","newTaskName","setNewTaskName","onSubmit","e","preventDefault","map","form","value","target","NextPanel","nextTaskId","useRecoilState","nextTask","setNextTask","MainPage","useParams","setProjectId","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68639336.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './LandingPage.css';\n\nconst LandingPage = () => {\n  const [newProjectId] = useState(uuidv4());\n\n  return (\n    <div className=\"LandingPage\">\n      <h1 className=\"LandingPage__title\">Next</h1>\n      <Link className={'LandingPage__cta'} to={`/project/${newProjectId}`}>\n        START NOW\n      </Link>\n    </div>\n  );\n};\nexport default LandingPage;\n","import { atom, atomFamily, selector } from 'recoil';\n\nimport { Project, ProjectId, Task, TaskId } from './types';\n\nconst taskStateById = atomFamily<Task, TaskId>({\n  key: 'Task',\n  default: {\n    name: 'DEFAULT-NAME',\n    status: 'ready',\n  },\n});\n\nconst projectIdState = atom<ProjectId>({\n  key: 'ProjectId',\n  default: 'AY61ltFwdgzx8AgBFqKC',\n});\n\nconst projectState = atom<Project>({\n  key: 'Project',\n  default: { tasks: [] },\n});\n\nconst nextTaskIdState = selector<TaskId | null>({\n  key: 'NextTaskId',\n  get: ({ get }) => {\n    const { tasks } = get(projectState);\n    return (\n      tasks.filter(\n        (taskId) => get(taskStateById(taskId)).status !== 'completed'\n      )[0] ?? null\n    );\n  },\n});\n\nexport { taskStateById, projectIdState, projectState, nextTaskIdState };\n","import { without } from 'lodash';\nimport { useRecoilCallback } from 'recoil';\n\nimport { projectState, taskStateById } from './atoms';\nimport { Task, TaskId } from './types';\n\nconst useRecoilProjectState = () => {\n  const addTask = useRecoilCallback(({ set }) => (id: TaskId, task: Task) => {\n    set(taskStateById(id), task);\n    set(projectState, (project) => ({\n      ...project,\n      tasks: [...project.tasks, id],\n    }));\n  });\n\n  const removeTask = useRecoilCallback(\n    ({ set }) =>\n      (id: TaskId) =>\n        set(projectState, (project) => ({\n          ...project,\n          tasks: without(project.tasks, id),\n        }))\n  );\n\n  const setTask = useRecoilCallback(\n    ({ set }) =>\n      (id: TaskId, task: Task) =>\n        set(taskStateById(id), task)\n  );\n\n  return { addTask, setTask, removeTask };\n};\n\nexport default useRecoilProjectState;\n","import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAvvj4nuUOxBJ6d0iE1Gjgg8gCXO7aXo_g',\n  authDomain: 'next-etienne.firebaseapp.com',\n  projectId: 'next-etienne',\n  storageBucket: 'next-etienne.appspot.com',\n  messagingSenderId: '489100545863',\n  appId: '1:489100545863:web:dafb3e6b2bb270198e4662',\n};\n\nconst app = initializeApp(firebaseConfig);\n\nconst firestore = getFirestore(app);\n\nexport default firestore;\n","import { useEffect } from 'react';\nimport { collection, onSnapshot } from 'firebase/firestore';\nimport { useRecoilValue } from 'recoil';\n\nimport useRecoilProjectState from './useRecoilProjectState';\nimport { projectIdState } from './atoms';\nimport firestore from './firestore';\nimport { Task } from './types';\n\nconst useSyncFirestore = (): void => {\n  const projectId = useRecoilValue(projectIdState);\n  const { addTask, setTask, removeTask } = useRecoilProjectState();\n\n  useEffect(() => {\n    const ref = collection(firestore, `projects/${projectId}/tasks`);\n    const unsubscribe = onSnapshot(ref, (snapshot) =>\n      snapshot.docChanges().forEach((change) => {\n        const { id } = change.doc;\n        const task = change.doc.data() as Task;\n        switch (change.type) {\n          case 'added':\n            addTask(id, task);\n            break;\n          case 'modified':\n            setTask(id, task);\n            break;\n          case 'removed':\n            removeTask(id);\n            break;\n        }\n      })\n    );\n    return unsubscribe;\n  }, [projectId, addTask, removeTask, setTask]);\n};\n\nexport default useSyncFirestore;\n","import { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\n\nimport { projectState } from './atoms';\n\nconst useClearProjectOnNewId = () => {\n  const setProject = useSetRecoilState(projectState);\n  useEffect(() => setProject({ tasks: [] }));\n};\n\nexport default useClearProjectOnNewId;\n","import { addDoc, collection } from 'firebase/firestore';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport firestore from 'firestore';\n\nimport { projectIdState } from './atoms';\n\nconst useAddTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (name: string) => {\n      const ref = collection(firestore, `projects/${projectId}/tasks`);\n      const task = {\n        name,\n        status: 'ready',\n      };\n      return addDoc(ref, task);\n    },\n    [projectId]\n  );\n};\n\nexport default useAddTask;\n","import { useRecoilValue } from 'recoil';\n\nimport { projectIdState } from './atoms';\nimport { TaskId } from './types';\nimport { useCallback } from 'react';\nimport { deleteDoc, doc } from 'firebase/firestore';\nimport firestore from 'firestore';\n\nconst useDeleteTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (id: TaskId) =>\n      deleteDoc(doc(firestore, `projects/${projectId}/tasks/${id}`)),\n    [projectId]\n  );\n};\n\nexport default useDeleteTask;\n","import { doc, updateDoc } from 'firebase/firestore';\nimport { useCallback } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport firestore from 'firestore';\n\nimport { projectIdState } from './atoms';\nimport { Task, TaskId } from './types';\n\nconst useUpdateTask = () => {\n  const projectId = useRecoilValue(projectIdState);\n\n  return useCallback(\n    (id: TaskId, update: Partial<Task>) =>\n      updateDoc(doc(firestore, `projects/${projectId}/tasks/${id}`), update),\n    [projectId]\n  );\n};\n\nexport default useUpdateTask;\n","import { useRecoilValue } from 'recoil';\n\nimport { taskStateById } from 'atoms';\nimport { TaskId } from 'types';\nimport useDeleteTask from 'useDeleteTask';\nimport useUpdateTask from 'useUpdateTask';\n\nimport './Task.css';\n\ntype Props = {\n  id: TaskId;\n};\n\nconst Task = ({ id }: Props) => {\n  const { name, status } = useRecoilValue(taskStateById(id));\n\n  const deleteTask = useDeleteTask();\n  const updateTask = useUpdateTask();\n\n  // TODO Use updater rather than local value\n  const toggleStatus = () =>\n    updateTask(id, { status: status === 'ready' ? 'completed' : 'ready' });\n\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"checkbox\"\n          checked={status === 'completed'}\n          onChange={toggleStatus}\n        />\n      </td>\n      <td className={'Task__name-td'}>{name}</td>\n      <td>\n        <button onClick={() => deleteTask(id)}>Delete</button>\n      </td>\n    </tr>\n  );\n};\n\nexport default Task;\n","import { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { projectState } from 'atoms';\nimport useAddTask from 'useAddTask';\n\nimport Task from './Task';\n\nimport './ListView.css';\n\nconst ListView = () => {\n  const { tasks } = useRecoilValue(projectState);\n  const [newTaskName, setNewTaskName] = useState<string>('');\n\n  const addTask = useAddTask();\n\n  return (\n    <>\n      <form\n        id=\"new-task-form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (newTaskName === '') return;\n          addTask(newTaskName);\n          setNewTaskName('');\n        }}\n      />\n      <table className=\"ListView\">\n        <tbody>\n          {tasks.map((task) => (\n            <Task key={task} id={task} />\n          ))}\n          <tr>\n            <td>\n              <button\n                className=\"ListView__new-task-submit\"\n                type=\"submit\"\n                form=\"new-task-form\"\n              />\n            </td>\n            <td>\n              <input\n                className=\"ListView__new-task-input\"\n                type=\"text\"\n                form=\"new-task-form\"\n                value={newTaskName}\n                onChange={(e) => setNewTaskName(e.target.value)}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default ListView;\n","import { useRecoilState, useRecoilValue } from 'recoil';\n\nimport { nextTaskIdState, taskStateById } from 'atoms';\n\nimport './NextPanel.css';\n\nconst NextPanel = () => {\n  const nextTaskId = useRecoilValue(nextTaskIdState);\n  const [nextTask, setNextTask] = useRecoilState(\n    taskStateById(nextTaskId ?? '')\n  );\n\n  return (\n    <div className=\"NextPanel\">\n      {nextTaskId === null ? (\n        <h2 className=\"NextPanel__done\">You're done!</h2>\n      ) : (\n        <>\n          <h2>Next Task</h2>\n          {nextTask.name}\n          <button\n            onClick={() =>\n              setNextTask((task) => ({ ...task, status: 'completed' }))\n            }\n          >\n            DONE!\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\nexport default NextPanel;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useSetRecoilState } from 'recoil';\n\nimport { projectIdState } from 'atoms';\nimport useSyncFirestore from 'useSyncFirestore';\nimport useClearProjectOnNewId from 'useClearProjectOnNewId';\n\nimport ListView from '../ListView/ListView';\nimport NextPanel from '../NextPanel/NextPanel';\n\nimport './MainPage.css';\n\nconst MainPage = () => {\n  const { projectId } = useParams<{ projectId: string }>();\n\n  const setProjectId = useSetRecoilState(projectIdState);\n\n  useEffect(() => setProjectId(projectId), [projectId, setProjectId]);\n\n  useSyncFirestore();\n  useClearProjectOnNewId();\n\n  return (\n    <div className=\"MainPage\">\n      <h1 className=\"MainPage__title\">Next</h1>\n      <ListView />\n      <NextPanel />\n    </div>\n  );\n};\nexport default MainPage;\n","import { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport LandingPage from './LandingPage/LandingPage';\nimport MainPage from './MainPage/MainPage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <LandingPage />\n        </Route>\n        <Route path=\"/project/:projectId\">\n          <MainPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}